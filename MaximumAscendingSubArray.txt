class Solution {
    public int maxAscendingSum(int[] nums) {
        // If array is empty, return 0
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        // Initialize variables
        int maxSum = nums[0];  // Start with first element as max sum
        int currentSum = nums[0];  // Current ascending subarray sum
        
        // Iterate through the array starting from second element
        for (int i = 1; i < nums.length; i++) {
            // If current number is greater than previous, extend current sum
            if (nums[i] > nums[i-1]) {
                currentSum += nums[i];
            }
            // Otherwise, start a new ascending subarray
            else {
                currentSum = nums[i];
            }
            
            // Update max sum if current sum is larger
            maxSum = Math.max(maxSum, currentSum);
        }
        
        return maxSum;
    }

    // Test method to verify solution
    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Test case 1: [10,20,30,5,10,50]
        int[] test1 = {10,20,30,5,10,50};
        System.out.println("Test 1: " + solution.maxAscendingSum(test1)); // Expected: 65
        
        // Test case 2: [10,20,30,40,50]
        int[] test2 = {10,20,30,40,50};
        System.out.println("Test 2: " + solution.maxAscendingSum(test2)); // Expected: 150
        
        // Test case 3: [12,17,15,13,10,11,12]
        int[] test3 = {12,17,15,13,10,11,12};
        System.out.println("Test 3: " + solution.maxAscendingSum(test3)); // Expected: 33
    }
}