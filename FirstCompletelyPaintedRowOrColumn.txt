import java.util.HashMap;

public class Solution {
    public int firstCompleteIndex(int[] arr, int[][] mat) {
        int m = mat.length;    // Number of rows
        int n = mat[0].length; // Number of columns

        // Map each element in mat to its row and column indices
        HashMap<Integer, int[]> cellMap = new HashMap<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                cellMap.put(mat[i][j], new int[]{i, j});
            }
        }

        // Arrays to track painted cells in rows and columns
        int[] rowPaintCount = new int[m];
        int[] colPaintCount = new int[n];

        // Traverse the arr to paint the matrix
        for (int i = 0; i < arr.length; i++) {
            int num = arr[i];
            int[] cell = cellMap.get(num); // Get the row and column for this number
            int row = cell[0];
            int col = cell[1];

            // Increment paint count for the row and column
            rowPaintCount[row]++;
            colPaintCount[col]++;

            // Check if the row or column is fully painted
            if (rowPaintCount[row] == n || colPaintCount[col] == m) {
                return i;
            }
        }

        return -1; // This should never happen as per the problem constraints
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        int[] arr1 = {1, 3, 4, 2};
        int[][] mat1 = {
            {1, 4},
            {2, 3}
        };
        System.out.println("Example 1 Output: " + solution.firstCompleteIndex(arr1, mat1)); // Output: 2

        int[] arr2 = {2, 8, 7, 4, 1, 3, 5, 6, 9};
        int[][] mat2 = {
            {3, 2, 5},
            {1, 4, 6},
            {8, 7, 9}
        };
        System.out.println("Example 2 Output: " + solution.firstCompleteIndex(arr2, mat2)); // Output: 3
    }
}
