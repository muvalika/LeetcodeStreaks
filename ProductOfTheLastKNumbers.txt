public class ProductOfNumbers {
    private List<Integer> products;
    
    public ProductOfNumbers() {
        // Initialize with 1 to handle edge cases and simplify calculations
        products = new ArrayList<>();
        products.add(1);
    }
    
    public void add(int num) {
        if (num == 0) {
            // If we encounter a zero, reset the list since any product 
            // including this zero will be zero
            products = new ArrayList<>();
            products.add(1);
        } else {
            // Multiply the last product with the new number
            products.add(products.get(products.size() - 1) * num);
        }
    }
    
    public int getProduct(int k) {
        int n = products.size();
        // If k is larger than our current product list (minus the initial 1),
        // it means there was a zero in the range, so return 0
        if (k >= n) {
            return 0;
        }
        
        // To get product of last k numbers, divide the current product
        // by the product that was k positions before
        return products.get(n - 1) / products.get(n - k - 1);
    }
}