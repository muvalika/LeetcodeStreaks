import java.util.*;

public class Solution {
    public int largestPathValue(String colors, int[][] edges) {
        int n = colors.length();
        int k = 26; // Number of lowercase English letters

        // Build graph and indegree array
        List<Integer>[] graph = new ArrayList[n];
        int[] indegree = new int[n];
        for (int i = 0; i < n; i++) graph[i] = new ArrayList<>();
        for (int[] edge : edges) {
            graph[edge[0]].add(edge[1]);
            indegree[edge[1]]++;
        }

        // DP table: dp[i][c] = max count of color c on any path ending at node i
        int[][] dp = new int[n][k];
        Queue<Integer> queue = new ArrayDeque<>();

        // Initialize queue with nodes of indegree 0
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) queue.offer(i);
        }

        int visited = 0;
        int result = 0;

        while (!queue.isEmpty()) {
            int u = queue.poll();
            visited++;

            // Current node's color index
            int colorIdx = colors.charAt(u) - 'a';
            dp[u][colorIdx]++;
            result = Math.max(result, dp[u][colorIdx]);

            for (int v : graph[u]) {
                // Update dp for neighbor
                for (int c = 0; c < k; c++) {
                    dp[v][c] = Math.max(dp[v][c], dp[u][c]);
                }
                indegree[v]--;
                if (indegree[v] == 0) queue.offer(v);
            }
        }

        // If not all nodes were visited, there is a cycle
        return visited == n ? result : -1;
    }
}
