import java.util.HashSet;
import java.util.Set;

public class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        Set<Integer> travelDays = new HashSet<>();
        for (int day : days) {
            travelDays.add(day);
        }
        
        int lastDay = days[days.length - 1];
        int[] dp = new int[lastDay + 1];
        
        for (int i = 1; i <= lastDay; i++) {
            if (!travelDays.contains(i)) {
                dp[i] = dp[i - 1];
            } else {
                dp[i] = Math.min(
                    dp[i - 1] + costs[0], // 1-day pass
                    Math.min(
                        dp[Math.max(0, i - 7)] + costs[1], // 7-day pass
                        dp[Math.max(0, i - 30)] + costs[2] // 30-day pass
                    )
                );
            }
        }
        
        return dp[lastDay];
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Example 1
        int[] days1 = {1, 4, 6, 7, 8, 20};
        int[] costs1 = {2, 7, 15};
        System.out.println(solution.mincostTickets(days1, costs1)); // Output: 11

        // Example 2
        int[] days2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31};
        int[] costs2 = {2, 7, 15};
        System.out.println(solution.mincostTickets(days2, costs2)); // Output: 17
    }
}