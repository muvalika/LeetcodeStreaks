public class Solution {
    public boolean isMatch(String s, String p) {
        int m = s.length();
        int n = p.length();
        
        // dp[i][j] represents if s[0...i-1] matches p[0...j-1]
        boolean[][] dp = new boolean[m + 1][n + 1];
        
        // Empty pattern can match empty string
        dp[0][0] = true;
        
        // Handle patterns like a*, a*b*, etc. matching empty string
        for (int j = 2; j <= n; j++) {
            if (p.charAt(j - 1) == '*') {
                dp[0][j] = dp[0][j - 2];
            }
        }
        
        // Fill the dp table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                char currentChar = s.charAt(i - 1);
                char patternChar = p.charAt(j - 1);
                
                if (patternChar == '.' || patternChar == currentChar) {
                    dp[i][j] = dp[i - 1][j - 1];
                } 
                else if (patternChar == '*') {
                    char prevPatternChar = p.charAt(j - 2);
                    
                    // Zero occurrence of pattern character
                    dp[i][j] = dp[i][j - 2];
                    
                    // If previous pattern char matches current char or is '.'
                    if (prevPatternChar == '.' || prevPatternChar == currentChar) {
                        dp[i][j] = dp[i][j] || dp[i - 1][j];
                    }
                }
            }
        }
        
        return dp[m][n];
    }
}