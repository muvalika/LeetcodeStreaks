class Solution {
    public int countGoodStrings(int low, int high, int zero, int one) {
        int MOD = 1_000_000_007;
        
        // dp[i] represents number of good strings of length i
        int[] dp = new int[high + 1];
        dp[0] = 1;  // empty string case
        
        // Fill dp array
        for (int i = 1; i <= high; i++) {
            // Add strings that can be formed by appending zeros
            if (i >= zero) {
                dp[i] = dp[i - zero];
            }
            
            // Add strings that can be formed by appending ones
            if (i >= one) {
                dp[i] = (dp[i] + dp[i - one]) % MOD;
            }
        }
        
        // Sum up all possibilities from low to high
        int result = 0;
        for (int i = low; i <= high; i++) {
            result = (result + dp[i]) % MOD;
        }
        
        return result;
    }
    
    // Test cases
    public static void main(String[] args) {
        Solution sol = new Solution();
        
        // Test case 1
        System.out.println(sol.countGoodStrings(3, 3, 1, 1));  // Expected: 8
        
        // Test case 2
        System.out.println(sol.countGoodStrings(2, 3, 1, 2));  // Expected: 5
    }
}