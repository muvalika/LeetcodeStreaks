import java.util.ArrayList;
import java.util.List;

public class Solution {
    public List<String> wordSubsets(String[] words1, String[] words2) {
        // Step 1: Find the maximum frequency count of each character across all words in words2
        int[] maxFreq = new int[26];
        for (String word : words2) {
            int[] freq = getFrequency(word);
            for (int i = 0; i < 26; i++) {
                maxFreq[i] = Math.max(maxFreq[i], freq[i]);
            }
        }

        // Step 2: Find all words in words1 that are universal
        List<String> result = new ArrayList<>();
        for (String word : words1) {
            int[] freq = getFrequency(word);
            boolean isUniversal = true;
            for (int i = 0; i < 26; i++) {
                if (freq[i] < maxFreq[i]) {
                    isUniversal = false;
                    break;
                }
            }
            if (isUniversal) {
                result.add(word);
            }
        }

        return result;
    }

    // Helper function to calculate the frequency of each character in a word
    private int[] getFrequency(String word) {
        int[] freq = new int[26];
        for (char c : word.toCharArray()) {
            freq[c - 'a']++;
        }
        return freq;
    }

    // Main method to test the solution
    public static void main(String[] args) {
        Solution solution = new Solution();

        String[] words1 = {"amazon", "apple", "facebook", "google", "leetcode"};
        String[] words2 = {"e", "o"};
        System.out.println(solution.wordSubsets(words1, words2)); // Output: [facebook, google, leetcode]

        String[] words1_2 = {"amazon", "apple", "facebook", "google", "leetcode"};
        String[] words2_2 = {"l", "e"};
        System.out.println(solution.wordSubsets(words1_2, words2_2)); // Output: [apple, google, leetcode]
    }
}