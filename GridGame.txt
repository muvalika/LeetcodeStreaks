public class Solution {
    public long gridGame(int[][] grid) {
        int n = grid[0].length;

        // Prefix sums for the two rows
        long[] topPrefix = new long[n];
        long[] bottomPrefix = new long[n];

        // Compute prefix sums for the top row
        topPrefix[0] = grid[0][0];
        for (int i = 1; i < n; i++) {
            topPrefix[i] = topPrefix[i - 1] + grid[0][i];
        }

        // Compute prefix sums for the bottom row
        bottomPrefix[0] = grid[1][0];
        for (int i = 1; i < n; i++) {
            bottomPrefix[i] = bottomPrefix[i - 1] + grid[1][i];
        }

        // Minimize the points the second robot can collect
        long result = Long.MAX_VALUE;

        for (int i = 0; i < n; i++) {
            // Points left on the top after the first robot moves down at column `i`
            long topPoints = topPrefix[n - 1] - topPrefix[i];

            // Points left on the bottom before the first robot reaches column `i`
            long bottomPoints = (i == 0) ? 0 : bottomPrefix[i - 1];

            // Maximize the points the second robot can collect
            long secondRobotPoints = Math.max(topPoints, bottomPoints);
            result = Math.min(result, secondRobotPoints);
        }

        return result;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        int[][] grid1 = {
            {2, 5, 4},
            {1, 5, 1}
        };
        System.out.println("Example 1 Output: " + solution.gridGame(grid1)); // Output: 4

        int[][] grid2 = {
            {3, 3, 1},
            {8, 5, 2}
        };
        System.out.println("Example 2 Output: " + solution.gridGame(grid2)); // Output: 4

        int[][] grid3 = {
            {1, 3, 1, 15},
            {1, 3, 3, 1}
        };
        System.out.println("Example 3 Output: " + solution.gridGame(grid3)); // Output: 7
    }
}
