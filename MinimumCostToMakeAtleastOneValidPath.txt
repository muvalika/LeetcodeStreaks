import java.util.*;

public class Solution {
    private static final int[][] DIRECTIONS = {
        {0, 1},   // right
        {0, -1},  // left
        {1, 0},   // down
        {-1, 0}   // up
    };
    
    public int minCost(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] cost = new int[m][n];
        for (int[] row : cost) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        cost[0][0] = 0;

        Deque<int[]> deque = new ArrayDeque<>();
        deque.addFirst(new int[]{0, 0});

        while (!deque.isEmpty()) {
            int[] current = deque.pollFirst();
            int x = current[0];
            int y = current[1];

            for (int i = 0; i < DIRECTIONS.length; i++) {
                int newX = x + DIRECTIONS[i][0];
                int newY = y + DIRECTIONS[i][1];
                if (newX >= 0 && newX < m && newY >= 0 && newY < n) {
                    int newCost = cost[x][y] + (grid[x][y] == i + 1 ? 0 : 1);
                    if (newCost < cost[newX][newY]) {
                        cost[newX][newY] = newCost;
                        if (grid[x][y] == i + 1) {
                            deque.addFirst(new int[]{newX, newY}); // Add with priority
                        } else {
                            deque.addLast(new int[]{newX, newY}); // Add with cost
                        }
                    }
                }
            }
        }
        return cost[m - 1][n - 1];
    }
}
